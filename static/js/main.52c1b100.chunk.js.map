{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","useState","latitude","setLatitude","longitude","setLongitude","countryName","setCountryName","distancePole","setDistancePole","part","setPart","useEffect","navigator","geolocation","getCurrentPosition","position","coords","distance","getDistance","className","onClick","id","type","onChange","e","target","value","result","lookUp","parseInt","country_a3","calculateCountry","rootElement","document","getElementById","render"],"mappings":"iKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8CC0DCQ,EA5DH,WACV,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAwCN,mBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAwBR,mBAAS,GAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,MAAgCA,EAASC,OAAjCf,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,UACZc,EAAWC,sBACf,CAAEjB,WAAUE,aACZ,CAAEF,SAAU,GAAME,UAAW,IAE/BK,EAAgBS,QAEjB,IAOH,OACE,sBAAKE,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIC,QAAS,kBAAMV,EAAQ,IAA3B,oBACA,oBAAIU,QAAS,kBAAMV,EAAQ,IAA3B,oBACA,oBAAIU,QAAS,kBAAMV,EAAQ,IAA3B,uBAGQ,IAATD,GACC,sBAAKU,UAAU,SAASE,GAAG,QAA3B,UACE,6CACA,uBACEA,GAAG,YACHC,KAAK,SACLC,SAAU,SAACC,GAAD,OAAOtB,EAAYsB,EAAEC,OAAOC,UAGxC,8CACA,uBACEL,GAAG,YACHC,KAAK,SACLC,SAAU,SAACC,GAAD,OAAOpB,EAAaoB,EAAEC,OAAOC,UAEzC,wBAAQN,QAAS,kBA5BA,WACvB,IAAMO,EAASC,iBAAOC,SAAS5B,GAAW4B,SAAS1B,IACnDG,EAAeqB,EAAOG,YA0BOC,IAAvB,yBACA,4BAAI1B,OAGE,IAATI,GACC,iEAAoCF,EAApC,aAEQ,IAATE,GACC,iFCrDFuB,G,MAAcC,SAASC,eAAe,SAC5CC,iBACC,cAAC,aAAD,UACC,cAAC,EAAD,MAEDH,GAOD1C,M","file":"static/js/main.52c1b100.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { lookUp } from \"geojson-places\";\nimport './App.css';\n\nconst App = () => {\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [countryName, setCountryName] = useState(\"\");\n  const [distancePole, setDistancePole] = useState(0);\n  const [part, setPart] = useState(0);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      const distance = getDistance(\n        { latitude, longitude },\n        { latitude: 90.0, longitude: 0.0 }\n      );\n      setDistancePole(distance);\n    });\n  }, []);\n\n  const calculateCountry = () => {\n    const result = lookUp(parseInt(latitude), parseInt(longitude));\n    setCountryName(result.country_a3);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1 onClick={() => setPart(0)}>Part A</h1>\n        <h1 onClick={() => setPart(1)}>Part B</h1>\n        <h1 onClick={() => setPart(2)}>Part C</h1>\n      </div>\n\n      {part === 0 && (\n        <div className=\"part-b\" id=\"calc1\">\n          <label>Latitude</label>\n          <input\n            id=\"lat_field\"\n            type=\"number\"\n            onChange={(e) => setLatitude(e.target.value)}\n          />\n\n          <label>Longitude</label>\n          <input\n            id=\"lon_field\"\n            type=\"number\"\n            onChange={(e) => setLongitude(e.target.value)}\n          />\n          <button onClick={() => calculateCountry()}> Calculate </button>\n          <p>{countryName}</p>\n        </div>\n      )}\n      {part === 1 && (\n        <h1>Distances from the North Pole: {distancePole} meters</h1>\n      )}\n      {part === 2 && (\n        <h1>Distance from the North Pole: { } meters</h1>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport { render } from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nconst rootElement = document.getElementById('root');\nrender(\n\t<StrictMode>\n\t\t<App />\n\t</StrictMode>,\n\trootElement\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}