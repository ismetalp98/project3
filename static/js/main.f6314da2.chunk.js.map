{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","useState","latitude","setLatitude","longitude","setLongitude","countryName","setCountryName","distancePole","setDistancePole","distanceMoon","setDistanceMoon","calculated","setCalculated","part","setPart","day","Date","inputs","id","type","value","onChange","e","target","className","onClick","result","lookUp","parseInt","country_a3","calculateCountry","distance","getDistance","calcPoleDistLoc","navigator","geolocation","getCurrentPosition","position","coords","toString","substring","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","console","log","moonPosition","Suncalc","calcMoonDist","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.f6314da2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { lookUp } from \"geojson-places\";\nimport * as Suncalc from \"suncalc\";\nimport './App.css';\n\nconst App = () => {\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [countryName, setCountryName] = useState(\"\");\n  const [distancePole, setDistancePole] = useState(0);\n  const [distanceMoon, setDistanceMoon] = useState(0);\n  const [calculated, setCalculated] = useState(false);\n  const [part, setPart] = useState(0);\n  const day = new Date();\n\n  const inputs = (\n    <>\n      <label>Latitude</label>\n      <input\n        id=\"lat_field\"\n        type=\"number\"\n        value={latitude}\n        onChange={(e) => setLatitude(e.target.value)}\n      />\n      <label>Longitude</label>\n      <input\n        id=\"lon_field\"\n        type=\"number\"\n        value={longitude}\n        onChange={(e) => setLongitude(e.target.value)}\n      />\n\n    </>\n  );\n\n  const usegpsdist = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      setLatitude(latitude);\n      setLongitude(longitude);\n    });\n  };\n\n  const calcPoleDistLoc = () => {\n    const distance = getDistance(\n      { latitude, longitude },\n      { latitude: 90.0, longitude: 0.0 }\n    );\n    setDistancePole(distance);\n  };\n\n  const calculateCountry = () => {\n    const result = lookUp(parseInt(latitude), parseInt(longitude));\n    setCountryName(result?.country_a3);\n    setLatitude(0);\n    setLongitude(0);\n    setCalculated(true);\n  };\n\n  const calcMoonDist = () => {\n    console.log(day);\n    const moonPosition = Suncalc.getMoonPosition(day, latitude, longitude);\n    setDistanceMoon(moonPosition.distance);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1 id='parta' onClick={() => setPart(0)}>Part A</h1>\n        <h1 id='partb' onClick={() => setPart(1)}>Part B</h1>\n        <h1 id='partc' onClick={() => setPart(2)}>Part C</h1>\n      </div>\n\n      {part === 0 && (\n        <div className=\"parts\" id=\"calc1\">\n          {inputs}\n          <button id=\"calculate\" onClick={() => calculateCountry()}> Calculate </button>\n          <p>{countryName}</p>\n          <span id=\"longitude-error\" >{(calculated && (longitude > 180 || longitude < -180)) && 'boundry error longitude'}</span>\n          <span id=\"latitude-error\" >{(calculated && (latitude > 90 || latitude < -90)) && 'boundry error latitude'}</span>\n        </div>\n      )}\n      {part === 1 && (\n        <div className=\"parts\" id=\"calc2\">\n          {inputs}\n          <button id=\"calcdist\" onClick={() => calcPoleDistLoc()}> Calculate </button>\n          <button id=\"usegps\" onClick={() => usegpsdist()}> Use GPS </button>\n          <h1>Distances from the North Pole: <p id=\"distance\">{distancePole.toString().substring(0, 4)}</p> km</h1>\n        </div>\n      )}\n      {part === 2 && (\n        <div className=\"parts\" id=\"calc3\">\n          {inputs}\n          <label>Year</label>\n          <input\n            id=\"lat_year\"\n            type=\"number\"\n            onChange={(e) => day.setFullYear(e.target.value)}\n          />\n          <label>Month</label>\n          <input\n            id=\"lat_month\"\n            type=\"number\"\n            onChange={(e) => day.setMonth(e.target.value)}\n          />\n          <label>Day</label>\n          <input\n            id=\"lat_day\"\n            type=\"number\"\n            onChange={(e) => day.setDate(e.target.value)}\n          />\n          <label>Hour</label>\n          <input\n            id=\"lat_day\"\n            type=\"number\"\n            onChange={(e) => day.setHours(e.target.value)}\n          />\n          <label>Minute</label>\n          <input\n            id=\"lat_day\"\n            type=\"number\"\n            onChange={(e) => day.setMinutes(e.target.value)}\n          />\n          <label>Second</label>\n          <input\n            id=\"lat_day\"\n            type=\"number\"\n            onChange={(e) => day.setSeconds(e.target.value)}\n          />\n          <button onClick={() => calcMoonDist()}> Calculate </button>\n          <h1>Distance to Moon is: {parseInt(distanceMoon)} km </h1>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport { render } from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nconst rootElement = document.getElementById('root');\nrender(\n\t<StrictMode>\n\t\t<App />\n\t</StrictMode>,\n\trootElement\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}