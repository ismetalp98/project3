{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","useState","latitude","setLatitude","longitude","setLongitude","countryName","setCountryName","distancePole","setDistancePole","distanceMoon","setDistanceMoon","laterror","setlaterror","longerror","setlongerror","dateerror","setdateerror","part","setPart","day","year","month","hour","minute","second","inputs","id","type","value","onChange","e","target","useEffect","className","onClick","tempLat","tempLong","check","isNaN","parseInt","result","lookUp","country_a3","calculateCountry","distance","getDistance","calcPoleDistLoc","navigator","geolocation","getCurrentPosition","position","coords","toString","substring","date","Date","console","log","getTime","moonPosition","Suncalc","calcMoonDist","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.125cc30f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { lookUp } from \"geojson-places\";\nimport * as Suncalc from \"suncalc\";\nimport './App.css';\nimport { useEffect } from \"react/cjs/react.production.min\";\n\nconst App = () => {\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [countryName, setCountryName] = useState(\"\");\n  const [distancePole, setDistancePole] = useState(0);\n  const [distanceMoon, setDistanceMoon] = useState(0);\n  const [laterror, setlaterror] = useState(\"\");\n  const [longerror, setlongerror] = useState(\"\");\n  const [dateerror, setdateerror] = useState(\"\");\n  const [part, setPart] = useState(0);\n  const day = {\n    year: 2020,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n  };\n\n  const inputs = (\n    <>\n      <label>Latitude</label>\n      <input\n        id=\"lat_field\"\n        type=\"number\"\n        value={latitude}\n        onChange={(e) => setLatitude(e.target.value)}\n      />\n      <label>Longitude</label>\n      <input\n        id=\"lon_field\"\n        type=\"number\"\n        value={longitude}\n        onChange={(e) => setLongitude(e.target.value)}\n      />\n\n    </>\n  );\n\n  useEffect(() => {\n    setLatitude();\n    setLongitude();\n    setCountryName(\"\");\n  }, [part]);\n\n  const usegpsdist = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      setLatitude(latitude);\n      setLongitude(longitude);\n    });\n  };\n\n  const calcPoleDistLoc = () => {\n    const distance = getDistance(\n      { latitude, longitude },\n      { latitude: 90.0, longitude: 0.0 }\n    );\n    setDistancePole(distance);\n  };\n\n  const calculateCountry = (tempLat, tempLong) => {\n    setlongerror(\"\");\n    setlaterror(\"\");\n    let check = 0;\n    if (isNaN(tempLat)) {\n      setlaterror(\"Latitude must be between -90 and 90\");\n      check = 1;\n    }\n    if (isNaN(tempLong)) {\n      setlongerror(\"Longitude must be between -180 and 180\");\n      check = 1;\n    }\n    if (check === 0) {\n      tempLat = parseInt(tempLat);\n      tempLong = parseInt(tempLong);\n      const result = lookUp(tempLat, tempLong);\n      setCountryName(result?.country_a3);\n      if (longitude > 180 || longitude < -180) {\n        setlongerror(\"Longitude must be between -180 and 180\");\n      }\n      if (latitude > 90 || latitude < -90) {\n        setlaterror(\"Latitude must be between -90 and 90\");\n      }\n    }\n    setLatitude();\n    setLongitude();\n  };\n\n  const calcMoonDist = () => {\n    const date = new Date(day.year, day.month, day.day, day.hour, day.minute, day.second);\n    console.log(date);\n    console.log(date.getTime());\n    if (!isNaN(date)) {\n      const moonPosition = Suncalc.getMoonPosition(day, latitude, longitude);\n      setDistanceMoon(moonPosition.distance);\n    } else {\n      setdateerror(\"Date is wrong\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1 id='parta' onClick={() => setPart(0)}>Part A</h1>\n        <h1 id='partb' onClick={() => setPart(1)}>Part B</h1>\n        <h1 id='partc' onClick={() => setPart(2)}>Part C</h1>\n      </div>\n\n      {part === 0 && (\n        <div className=\"parts\" id=\"calc1\">\n          <label>Latitude</label>\n          <input\n            id=\"lat_field\"\n            type=\"text\"\n            value={latitude}\n            onChange={(e) => setLatitude(e.target.value)}\n          />\n          <label>Longitude</label>\n          <input\n            id=\"lon_field\"\n            type=\"text\"\n            value={longitude}\n            onChange={(e) => setLongitude(e.target.value)}\n          />\n          <button id=\"calculate\" onClick={() => calculateCountry(latitude, longitude)}> Calculate </button>\n          <p id=\"country\">{countryName}</p>\n          <span id=\"longitude-error\" >{longerror}</span>\n          <span id=\"latitude-error\" >{laterror}</span>\n        </div>\n      )}\n      {part === 1 && (\n        <div className=\"parts\" id=\"calc2\">\n          {inputs}\n          <button id=\"calcdist\" onClick={() => calcPoleDistLoc()}> Calculate </button>\n          <button id=\"usegps\" onClick={() => usegpsdist()}> Use GPS </button>\n          <h1>Distances from the North Pole: <p id=\"distance\">{distancePole.toString().substring(0, 4)}</p> km</h1>\n        </div>\n      )}\n      {part === 2 && (\n        <div className=\"parts\" id=\"calc3\">\n          {inputs}\n          <label>Year</label>\n          <input\n            id=\"year\"\n            type=\"number\"\n            onChange={(e) => day.year = (e.target.value)}\n          />\n          <label>Month</label>\n          <input\n            id=\"month\"\n            type=\"number\"\n            onChange={(e) => day.month = (e.target.value)}\n          />\n          <label>Day</label>\n          <input\n            id=\"day\"\n            type=\"number\"\n            onChange={(e) => day.day = (e.target.value)}\n          />\n          <label>Hour</label>\n          <input\n            id=\"hour\"\n            type=\"number\"\n            onChange={(e) => day.hour = (e.target.value)}\n          />\n          <label>Minute</label>\n          <input\n            id=\"minute\"\n            type=\"number\"\n            onChange={(e) => day.minute = (e.target.value)}\n          />\n          <label>Second</label>\n          <input\n            id=\"second\"\n            type=\"number\"\n            onChange={(e) => day.second = (e.target.value)}\n          />\n          <button id=\"calculate\" onClick={() => calcMoonDist()}> Calculate </button>\n          <h1>Distance to Moon is: <p id=\"distance\">{parseInt(distanceMoon)}</p> km </h1>\n          <span id=\"date-error\" >{dateerror}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport { render } from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nconst rootElement = document.getElementById('root');\nrender(\n\t<StrictMode>\n\t\t<App />\n\t</StrictMode>,\n\trootElement\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}