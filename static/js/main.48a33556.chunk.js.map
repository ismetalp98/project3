{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","useState","latitude","setLatitude","longitude","setLongitude","countryName","setCountryName","distancePole","setDistancePole","distanceMoon","setDistanceMoon","laterror","setlaterror","longerror","setlongerror","dateerror","setdateerror","part","setPart","year","month","day","hour","minute","second","dayState","setDayState","inputs","id","type","value","onChange","e","target","useEffect","usegpsdist","navigator","geolocation","getCurrentPosition","position","coords","className","onClick","tempLat","tempLong","check","isNaN","parseInt","result","lookUp","country_a3","calculateCountry","distance","getDistance","calcPoleDistLoc","toString","substring","date","Date","moonPosition","Suncalc","calcMoonDist","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.48a33556.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { lookUp } from \"geojson-places\";\nimport * as Suncalc from \"suncalc\";\nimport './App.css';\n\nconst App = () => {\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [countryName, setCountryName] = useState(\"\");\n  const [distancePole, setDistancePole] = useState(0);\n  const [distanceMoon, setDistanceMoon] = useState(0);\n  const [laterror, setlaterror] = useState(\"\");\n  const [longerror, setlongerror] = useState(\"\");\n  const [dateerror, setdateerror] = useState(\"\");\n  const [part, setPart] = useState(0);\n  const [dayState, setDayState] = useState({\n    year: 'asd',\n    month: 'asd',\n    day: 'asd',\n    hour: 'asd',\n    minute: 'asd',\n    second: 'asd',\n  });\n\n  const inputs = (\n    <>\n      <label>Latitude</label>\n      <input\n        id=\"lat_field\"\n        type=\"number\"\n        value={latitude}\n        onChange={(e) => setLatitude(e.target.value)}\n      />\n      <label>Longitude</label>\n      <input\n        id=\"lon_field\"\n        type=\"number\"\n        value={longitude}\n        onChange={(e) => setLongitude(e.target.value)}\n      />\n\n    </>\n  );\n\n  useEffect(() => {\n    setLatitude();\n    setLongitude();\n    setCountryName(\"\");\n  }, [part]);\n\n  const usegpsdist = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      setLatitude(latitude);\n      setLongitude(longitude);\n    });\n  };\n\n  const calcPoleDistLoc = () => {\n    const distance = getDistance(\n      { latitude, longitude },\n      { latitude: 90.0, longitude: 0.0 }\n    );\n    setDistancePole(distance);\n  };\n\n  const calculateCountry = (tempLat, tempLong) => {\n    setlongerror(\"\");\n    setlaterror(\"\");\n    let check = 0;\n    if (isNaN(tempLat)) {\n      setlaterror(\"Latitude must be between -90 and 90\");\n      check = 1;\n    }\n    if (isNaN(tempLong)) {\n      setlongerror(\"Longitude must be between -180 and 180\");\n      check = 1;\n    }\n    if (check === 0) {\n      tempLat = parseInt(tempLat);\n      tempLong = parseInt(tempLong);\n      const result = lookUp(tempLat, tempLong);\n      setCountryName(result?.country_a3);\n      if (longitude > 180 || longitude < -180) {\n        setlongerror(\"Longitude must be between -180 and 180\");\n      }\n      if (latitude > 90 || latitude < -90) {\n        setlaterror(\"Latitude must be between -90 and 90\");\n      }\n    }\n    setLatitude();\n    setLongitude();\n  };\n\n  const calcMoonDist = () => {\n    if (dayState.month < 0 || dayState.month > 12 || dayState.day < 0 || dayState.day > 31 || dayState.hour < 0 || dayState.hour > 23 || dayState.minute < 0 || dayState.minute > 59 || dayState.second < 0 || dayState.second > 59) {\n      setDistanceMoon('NaN');\n      setdateerror(\"Date is wrong\");\n    } else {\n      const date = new Date(dayState.year, dayState.month, dayState.day, dayState.hour, dayState.minute, dayState.second);\n      if (!isNaN(date)) {\n        const moonPosition = Suncalc.getMoonPosition(date, latitude, longitude);\n        setDistanceMoon(moonPosition.distance);\n        setdateerror(\"\");\n      } else {\n        setDistanceMoon('NaN');\n        setdateerror(\"Date is wrong\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1 id='parta' onClick={() => setPart(0)}>Part A</h1>\n        <h1 id='partb' onClick={() => setPart(1)}>Part B</h1>\n        <h1 id='partc' onClick={() => setPart(2)}>Part C</h1>\n      </div>\n\n      {part === 0 && (\n        <div className=\"parts\" id=\"calc1\">\n          <label>Latitude</label>\n          <input\n            id=\"lat_field\"\n            type=\"text\"\n            value={latitude}\n            onChange={(e) => setLatitude(e.target.value)}\n          />\n          <label>Longitude</label>\n          <input\n            id=\"lon_field\"\n            type=\"text\"\n            value={longitude}\n            onChange={(e) => setLongitude(e.target.value)}\n          />\n          <button id=\"calculate\" onClick={() => calculateCountry(latitude, longitude)}> Calculate </button>\n          <p id=\"country\">{countryName}</p>\n          <span id=\"longitude-error\" >{longerror}</span>\n          <span id=\"latitude-error\" >{laterror}</span>\n        </div>\n      )}\n      {part === 1 && (\n        <div className=\"parts\" id=\"calc2\">\n          {inputs}\n          <button id=\"calcdist\" onClick={() => calcPoleDistLoc()}> Calculate </button>\n          <button id=\"usegps\" onClick={() => usegpsdist()}> Use GPS </button>\n          <h1>Distances from the North Pole: <p id=\"distance\">{distancePole.toString().substring(0, 4)}</p> km</h1>\n        </div>\n      )}\n      {part === 2 && (\n        <div className=\"parts\" id=\"calc3\">\n          {inputs}\n          <label>Year</label>\n          <input\n            id=\"year\"\n            type=\"text\"\n            onChange={(e) => setDayState({ ...dayState, year: e.target.value })}\n          />\n          <label>Month</label>\n          <input\n            id=\"month\"\n            type=\"text\"\n            onChange={(e) => setDayState({ ...dayState, month: e.target.value })}\n          />\n          <label>Day</label>\n          <input\n            id=\"day\"\n            type=\"text\"\n            onChange={(e) => setDayState({ ...dayState, day: e.target.value })}\n          />\n          <label>Hour</label>\n          <input\n            id=\"hour\"\n            type=\"text\"\n            onChange={(e) => setDayState({ ...dayState, hour: e.target.value })}\n          />\n          <label>Minute</label>\n          <input\n            id=\"minute\"\n            type=\"text\"\n            onChange={(e) => setDayState({ ...dayState, minute: e.target.value })}\n          />\n          <label>Second</label>\n          <input\n            id=\"second\"\n            type=\"text\"\n            onChange={(e) => setDayState({ ...dayState, second: e.target.value })}\n          />\n          <button id=\"calculate\" onClick={() => calcMoonDist()}> Calculate </button>\n          <button id=\"usegps\" onClick={() => usegpsdist()}> Use GPS </button>\n          <h1>Distance to Moon is: <p id=\"distance\">{parseInt(distanceMoon)}</p> km </h1>\n          <span id=\"date-error\" >{dateerror}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport { render } from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nconst rootElement = document.getElementById('root');\nrender(\n\t<StrictMode>\n\t\t<App />\n\t</StrictMode>,\n\trootElement\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}